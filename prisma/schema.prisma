generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Ensure this points to your PostgreSQL database
}

model User {
  id               Int             @id @default(autoincrement())
  username         String          @unique
  email            String          @unique
  password         String?
  firstName        String?
  lastName         String?
  livingIn         String?
  wentTo           String?
  worksAt          String?
  bio              String?
  profilePicture   String?
  posts            Post[]          @relation("UserPosts")
  comments         Comment[]       @relation("UserComments")
  likes            Like[]          @relation("UserLikes")
  shares           Share[]         @relation("UserShares")
  stories          Story[]         @relation("UserStories")
  sentRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedRequests FriendRequest[] @relation("ReceivedFriendRequests")
  following        Following[]     @relation("UserFollowing")
  followers        Following[]     @relation("UserFollowers")
  blockedUsers     Block[]         @relation("UserBlockedUsers")
  blockedBy        Block[]         @relation("UserBlockedBy")
  sentMessages     Message[]       @relation("SentMessages")
  receivedMessages Message[]       @relation("ReceivedMessages")
  friends1         Friend[]        @relation("UserFriends1")
  friends2         Friend[]        @relation("UserFriends2")
  accounts         Account[]
  sessions         Session[]
  authenticators   Authenticator[]
  notifications    Notification[]  @relation("UserNotifications")
  sentNotifications Notification[] @relation("SenderNotifications")

  // Email verification fields
  verified         Boolean         @default(false)
  verificationCode String?         @unique // Make verificationCode unique
  verifiedAt       DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}


model Post {
  id            Int             @id @default(autoincrement())
  content       String
  imageUrl      String?
  createdAt     DateTime        @default(now())
  userId        Int
  user          User            @relation("UserPosts", fields: [userId], references: [id])
  comments      Comment[]       @relation("PostComments")
  likes         Like[]          @relation("PostLikes")
  shares        Share[]         @relation("PostShares")
  notifications Notification[]  @relation("PostNotifications")
  likeCount     Int             @default(0)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  user      User     @relation("UserComments", fields: [userId], references: [id])
  post      Post     @relation("PostComments", fields: [postId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  post      Post     @relation("PostLikes", fields: [postId], references: [id])
}

model Share {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation("UserShares", fields: [userId], references: [id])
  post      Post     @relation("PostShares", fields: [postId], references: [id])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  senderId  Int
  postId    Int?
  messageId Int?
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  sender    User     @relation("SenderNotifications", fields: [senderId], references: [id])
  post      Post?    @relation("PostNotifications", fields: [postId], references: [id])
  message   Message? @relation("MessageNotifications", fields: [messageId], references: [id])
}

model Story {
  id        Int      @id @default(autoincrement())
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    Int
  user      User     @relation("UserStories", fields: [userId], references: [id])
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
}

model Following {
  id          Int    @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
}

model Block {
  id         Int    @id @default(autoincrement())
  blockerId  Int
  blockedId  Int
  createdAt  DateTime @default(now())
  blocker    User     @relation("UserBlockedUsers", fields: [blockerId], references: [id])
  blocked    User     @relation("UserBlockedBy", fields: [blockedId], references: [id])
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Message {
  id          Int            @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  content     String
  createdAt   DateTime       @default(now())

  sender      User           @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User           @relation("ReceivedMessages", fields: [receiverId], references: [id])
  notifications Notification[] @relation("MessageNotifications")
}

model Friend {
  id         Int      @id @default(autoincrement())
  user1Id    Int
  user2Id    Int
  createdAt  DateTime @default(now())

  user1      User     @relation("UserFriends1", fields: [user1Id], references: [id])
  user2      User     @relation("UserFriends2", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
}

model Session {
  id                 String    @id @default(cuid())
  sessionToken       String    @unique
  userId             Int
  expires            DateTime
  user               User      @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier         String
  token              String    @unique
  expires            DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id            Int      @id @default(autoincrement())
  userId        Int
  secret        String
  verified      Boolean  @default(false)
  recoveryCodes Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}